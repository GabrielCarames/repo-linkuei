import Colectivo.*
import Recaudacion.*
import Combustible.*
import Pasajeros.*
import Paradas.*


/* Primer caso */
test "Verificacion del combustible"{
	thames.personasQueSubiran(1)
	liniers.personasQueSubiran(0)
	colectivo.avanzar() 
	colectivo.subirPersona(palermo)
	colectivo.avanzar() 
	/* Devuelve verdad si el combustible se pasa del minimo*/
	assert.that(combustible.verificarFuturoConsumo())
}

/* Segundo caso */
test "Verificacion de pasajeros"{
	pasajeros.maxCapacidad(15)
	thames.personasQueSubiran(10)
	liniers.personasQueSubiran(5)
	
	colectivo.avanzar()
	colectivo.subirPersona(terminal)
	colectivo.subirPersona(terminal)
	colectivo.subirPersona(terminal)
	colectivo.subirPersona(terminal)
	colectivo.subirPersona(terminal)
	colectivo.subirPersona(terminal)
	colectivo.subirPersona(terminal)
	colectivo.subirPersona(terminal)
	colectivo.subirPersona(terminal)
	colectivo.subirPersona(terminal)
	
	colectivo.avanzar()
	colectivo.subirPersona(terminal)
	colectivo.subirPersona(terminal)
	colectivo.subirPersona(terminal)
	colectivo.subirPersona(terminal)
	colectivo.subirPersona(terminal)
	assert.that(pasajeros.capacidadMaxima())
} 

test "Verificar recorrido colectivo (completo)"{
	thames.personasQueSubiran(0)
	liniers.personasQueSubiran(0)
	palermo.personasQueSubiran(0)
	saavedra.personasQueSubiran(0)
	colectivo.avanzar()
	colectivo.avanzar()
	colectivo.avanzar()
	colectivo.avanzar()
	colectivo.avanzar()
	colectivo.avanzar()
	colectivo.avanzar()
	colectivo.avanzar()
	colectivo.avanzar()
	colectivo.avanzar()
	assert.equals(0, colectivo.parada())
}


test "Verificar recaudacion"{
	thames.personasQueSubiran(1)
	liniers.personasQueSubiran(2)
	palermo.personasQueSubiran(1)
	saavedra.personasQueSubiran(1)

	colectivo.avanzar()
	colectivo.subirPersona(palermo) /* +20 */
	colectivo.avanzar()			
	colectivo.subirPersona(terminal) /* +20 */		
	colectivo.subirPersona(terminal) /* +20 */		
	colectivo.avanzar()	
	colectivo.subirPersona(terminal) /* +20 */
	colectivo.bajarPersonas()
	colectivo.avanzar()	
	colectivo.subirPersona(terminal) /* +5 */
	/* Recaudacion actual 85 */
	assert.equals(recaudacion.actual(), 85)
}

test "Verificar re-carga"{
	thames.personasQueSubiran(1)
	liniers.personasQueSubiran(2)
	palermo.personasQueSubiran(1)
	saavedra.personasQueSubiran(1)

	colectivo.avanzar()
	colectivo.subirPersona(palermo) /* +20 */
	colectivo.avanzar()			
	colectivo.subirPersona(terminal) /* +20 */		
	colectivo.subirPersona(terminal) /* +20 */		
	colectivo.avanzar()	
	colectivo.subirPersona(terminal) /* +20 */
	colectivo.bajarPersonas()
	colectivo.avanzar()	
	colectivo.subirPersona(terminal) /* +5 */
	colectivo.avanzar()
	/* Recaudacion actual 85 */
	/* Combustible actual 68.6 */
	combustible.cargar(20)
	/* Recaudacion actual 45 */
	/* Combustible actual 88.6 */
	assert.equals(combustible.actual(), 88.6)
	assert.equals(recaudacion.actual(), 45)
}